services:
  # === Vector DB ===
  chromadb:
    image: chromadb/chroma:0.6.3   # バージョンを明示推奨
    container_name: chromadb-server
    ports:
      - "8000:8000"
    volumes:
      - ./chromadb_data:/chroma/chroma  # データ永続化フォルダ
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=TRUE
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Static DB (POI / access_points) ===
  static-db:
    image: postgis/postgis:16-3.4
    container_name: nav_static_db
    environment:
      POSTGRES_DB: nav_static
      POSTGRES_USER: nav_static
      POSTGRES_PASSWORD: nav_static
    ports:
      - "5432:5432"       # ローカルから接続したい場合（不要なら消してください）
    volumes:
      - ./backend/.pgdata_static:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nav_static -d nav_static"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  # 初期データ投入（POI / facilities / access_points）
  static-db-init:
    image: python:3.11-slim
    container_name: nav_static_db_init
    depends_on:
      static-db:
        condition: service_healthy
    working_dir: /app
    environment:
      PYTHONPATH: /app/backend
      DB_HOST: static-db
      DB_PORT: "5432"
      DB_NAME: nav_static
      DB_USER: nav_static
      DB_PASSWORD: nav_static
      # 入力ファイル（必要に応じてパス調整）
      POI_JSON: /app/backend/worker/data/POI.json
      FACILITIES_JSON: /app/backend/worker/data/facilities.json
      ACCESS_POINTS: /app/backend/worker/data/access_points.geojson
      # 既存データがあっても挿入したい場合は 1 に（既定は 0 = 既存ありならスキップ）
      FORCE_INSERT: "0"
    volumes:
      - ./backend:/app/backend   # ← COPY せず volume で
    command: >
      bash -lc "
        pip install --no-cache-dir
          psycopg2-binary==2.9.9
          sqlalchemy==2.0.30
          geoalchemy2==0.14.6
          shapely==2.0.4
          pandas==2.2.2
          orjson==3.10.3 &&
        python backend/script/init_static_db.py
      "
    
  # === Ollama (GPU想定) ===
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      # 開発でモデルを固定したい場合は環境変数を持たせておく（pullは下の sidecar）
      - OLLAMA_DEFAULT_MODEL=Qwen3:30
      - OLLAMA_EMBEDDING_MODEL=mxbai-embed-large:latest
    volumes:
      - ollama_models:/root/.ollama
    # GPU を使う場合（Compose v2+）
    gpus: all
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:11434/api/tags >/dev/null"]
      interval: 30s
      timeout: 5s
      retries: 10
    restart: unless-stopped
  
  # Ollama モデルを起動時にpull（任意．不要なら削除）
  ollama-pull:
    image: ollama/ollama:latest
    container_name: ollama-pull
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_DEFAULT_MODEL=Qwen3:30
    command: >
      bash -lc "
        ollama pull ${OLLAMA_DEFAULT_MODEL} || true && ollama pull ${OLLAMA_EMBEDDING_MODEL} || true
      "
    restart: "no"
  
  # === OSRM (car / foot) ===
  osrm-car:
    image: osrm/osrm-backend
    container_name: osrm-car
    command: ["osrm-routed", "--algorithm", "mld", "/data/japan-car.osrm"]
    volumes:
      - ./backend/worker/data/map/car:/data:ro
    ports:
      - "5001:5000"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  osrm-foot:
    image: osrm/osrm-backend
    container_name: osrm-foot
    command: ["osrm-routed", "--algorithm", "mld", "/data/japan-foot.osrm"]
    volumes:
      - ./backend/worker/data/map/foot:/data:ro
    ports:
      - "5002:5000"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 10
    restart: unless-stopped
  
  # === API Gateway (フロント直結) ===
  api:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: api-gateway
    environment:
      # --- 静的DB（POI・access_points） ---
      STATIC_DB_HOST: static-db
      STATIC_DB_PORT: "5432"
      STATIC_DB_NAME: nav_static
      STATIC_DB_USER: nav_static
      STATIC_DB_PASSWORD: nav_static
      # --- 将来の動的DB（ユーザ）を見据えた命名 ---
      APP_DB_HOST: app-db
      APP_DB_PORT: "5432"
      APP_DB_NAME: app_runtime
      APP_DB_USER: app_runtime
      APP_DB_PASSWORD: app_runtime
      # --- 下流（Worker FastAPI） ---
      WORKER_BASE_URL: http://worker:8090
    depends_on:
      static-db:
        condition: service_healthy
      worker:
        condition: service_started
    command: bash -lc "uvicorn backend.api.main:app --host 0.0.0.0 --port 8080"
    ports:
      - "8080:8080"
    restart: unless-stopped

  # === Worker (全てのタスクを行う) ===
  worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: worker-api
    environment:
      STATIC_DB_HOST: static-db
      STATIC_DB_PORT: "5432"
      STATIC_DB_NAME: nav_static
      STATIC_DB_USER: nav_static
      STATIC_DB_PASSWORD: nav_static
      OSRM_CAR_URL: http://osrm-car:5000
      OSRM_FOOT_URL: http://osrm-foot:5000
      # RAG/LLM
      CHROMA_URL: http://chromadb:8000
      OLLAMA_URL: http://ollama:11434
      OLLAMA_MODEL: Qwen3:30
      OLLAMA_EMBED_MODEL: mxbai-embed-large:latest
      # ナビ設定
      CORRIDOR_WIDTH_M: "500"
      ALONG_BUFFER_CAR_M: "300"
      ALONG_BUFFER_FOOT_M: "10"
    depends_on:
      static-db:
        condition: service_healthy
      osrm-car:
        condition: service_started
      osrm-foot:
        condition: service_started
      chromadb:
        condition: service_started
      ollama:
        condition: service_healthy
    volumes:
      - ./backend/worker/data:/app/backend/worker/data:ro
    command: bash -lc "uvicorn backend.worker.app.main:app --host 0.0.0.0 --port 8090"
    ports:
      - "8090:8090"
    restart: unless-stopped

  # Celery Worker（将来の会話系タスク用。今は並行で常駐させるだけ）
  celery:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: celery-worker
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    depends_on:
      - worker
    command: >
      bash -lc "celery -A backend.worker.celery.celery_app.celery_app
      worker --loglevel=info --pool=threads --concurrency=1"
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: redis-broker
    ports: ["6379:6379"]
    restart: unless-stopped